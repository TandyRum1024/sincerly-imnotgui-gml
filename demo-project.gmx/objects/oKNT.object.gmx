<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// stort
iui_init();
iui_init_vars_custom();
dbTime = 0;
show_debug_overlay(true);
window_set_cursor(cr_none);

time = 0;

uiBigMsg    = "ASDF";
uiBigMsgCtr = 80;
uiMsg    = "UIOP";
uiMsgCtr = 80;

// mouse dangly stuff
var mousex_ = window_mouse_get_x(), mousey_ = window_mouse_get_y();
uiMouseTailSegments = 5;
uiMouseTailSize = 14;
uiMouseTailColourNum = 2;
uiMouseTailColour = 0;
uiMouseTailColour[0] = iuRed;
uiMouseTailColour[1] = iuCream;
uiMouseColour = 0;

uiMouseReady = false;

for (var i=0; i&lt;uiMouseTailSegments; i++)
{
    uiMouseVerlet[ i, 0] = mousex_+i*(uiMouseTailSize-2);
    uiMouseVerlet[ i, 1] = mousey_;
    uiMouseVerlet[ i, 2] = mousex_+i*(uiMouseTailSize-2);
    uiMouseVerlet[ i, 3] = mousey_;
    uiMouseVerlet[ i, 4] = 0;
    uiMouseVerlet[ i, 5] = 0;
    uiMouseVerlet[ i, 6] = 0;
    uiMouseVerlet[ i, 7] = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// IMNOTUI
iui_update_io();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// MOUSE CURSOR VERLET
var mouseOffX = window_mouse_get_x() + 12, mouseOffY = window_mouse_get_y() + 37;
if (!uiMouseReady &amp;&amp; !(window_mouse_get_x() == 0 &amp;&amp; window_mouse_get_y() == 0))
{
    for (var i=0; i&lt;uiMouseTailSegments; i++)
    {
        uiMouseVerlet[ i, 0] = mouseOffX+i*(uiMouseTailSize);
        uiMouseVerlet[ i, 1] = mouseOffY;
        uiMouseVerlet[ i, 2] = mouseOffY+i*(uiMouseTailSize);
        uiMouseVerlet[ i, 3] = mouseOffY;
        uiMouseVerlet[ i, 4] = 0;
        uiMouseVerlet[ i, 5] = 0;
        uiMouseVerlet[ i, 6] = 0;
    }
    
    uiMouseReady = true;
}


/// verlet basic
var curX, curY;
for (var i=0; i&lt;uiMouseTailSegments; i++)
{
    // gravity
    uiMouseVerlet[ i, 5] = 0.98;

    // get current X, Y
    curX = uiMouseVerlet[ i, 0];
    curY = uiMouseVerlet[ i, 1];
    
    // calc velocity and integrate
    var velX = curX - uiMouseVerlet[ i, 2];
    var velY = curY - uiMouseVerlet[ i, 3];
    uiMouseVerlet[ i, 0] += velX + uiMouseVerlet[ i, 4];
    uiMouseVerlet[ i, 1] += velY + uiMouseVerlet[ i, 5];
    
    // previous X
    uiMouseVerlet[ i, 2] = curX;
    uiMouseVerlet[ i, 3] = curY;
}

uiMouseVerlet[ 0, 0] = mouseOffX;
uiMouseVerlet[ 0, 1] = mouseOffY;
uiMouseVerlet[ 0, 2] = mouseOffX;
uiMouseVerlet[ 0, 3] = mouseOffY;

/// verlet constraint
// link
var dx, dy, dist, det;
var impulseX, impulseY;
var linkAngle;
var lastIdx = uiMouseTailSegments - 1;
repeat (2) // relaxation
{
    for (var i=0; i&lt;lastIdx; i++)
    {
        dx = uiMouseVerlet[ i, 0] - uiMouseVerlet[ i + 1, 0];
        dy = uiMouseVerlet[ i, 1] - uiMouseVerlet[ i + 1, 1];
        dist = sqrt((dx*dx) + (dy * dy));
        det = (((uiMouseTailSize - 2) - dist) / dist) * 0.5;

        impulseX = dx * det;
        impulseY = dy * det;
        
        // displace
        uiMouseVerlet[ i, 0]   += impulseX;
        uiMouseVerlet[ i, 1]   += impulseY;
        uiMouseVerlet[ i+1, 0] -= impulseX;
        uiMouseVerlet[ i+1, 1] -= impulseY;
        
        // distance
        uiMouseVerlet[ i, 7]   = dist;
        uiMouseVerlet[ i+1, 7] = dist;
        
        // angle
        linkAngle = point_direction(uiMouseVerlet[ i, 0], uiMouseVerlet[ i, 1], uiMouseVerlet[ i+1, 0], uiMouseVerlet[ i+1, 1]);
        uiMouseVerlet[ i, 6]   = linkAngle;
        uiMouseVerlet[ i+1, 6] = linkAngle;
    }
}

/*
for (var i=0; i&lt;uiMouseTailSegments - 1; i++)
{
    linkAngle = point_direction(uiMouseVerlet[ i, 0], uiMouseVerlet[ i, 1], uiMouseVerlet[ i+1, 0], uiMouseVerlet[ i+1, 1]);
    uiMouseVerlet[ i, 6]   = linkAngle;
    uiMouseVerlet[ i+1, 6] = linkAngle;
}
*/
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// KAWAII CURSOR LOGIC
time++;

if (iui_inputDown)
{
    iuMouseColour = iuRed;
    
    uiMouseTailColour[0] = select((time &gt;&gt; 4) &amp; 1, iuRed, iuCream);
    uiMouseTailColour[1] = select((time &gt;&gt; 4) &amp; 1, iuCream, iuRed);
}
else
{
    iuMouseColour = iuCream;
    
    uiMouseTailColour[0] = select((time &gt;&gt; 4) &amp; 1, iuDark2, iuCream);
    uiMouseTailColour[1] = select((time &gt;&gt; 4) &amp; 1, iuCream, iuDark2);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///RAINBOW SCROLLER!!!
var iuRainbow = make_colour_hsv(iuiAnimTime * 2, 225, 255);
iui_scroller_colour[0] = iuRainbow;
iui_scroller_colour[3] = iuRainbow;
iui_scroller_colour[8] = iuRainbow;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// UI PLZ
dbTime++;

// clear
draw_clear(iuDark2);

// ui
iui_begin();

// backdrop
var SCREEN_CENTER_X = 1280 / 2;
var SCREEN_CENTER_Y = 720 / 2;

iui_rect(42, 0, 1196, 85, iuHellaDark);
iui_rect(42, 85, 1196, 600, iuDark);
iui_rect(42, 680, 1196, 40, iuHellaDark);


// see iui_init_vars() for ui_tab_test_idx
var sine01_ = sin(iuiAnimTime * 0.1); // sine cache

var TAB_X = 42;
ui_tab_main_idx = iui_tab(TAB_X, 30, 140, 50, iui_pack("IMnotGUI", "elements", "ID and LABEL system", "how?", "contact", "MISC.", "asdf"), ui_tab_main_idx, 2);

switch (ui_tab_main_idx)
{
    case 0:
        /// Intro
        draw_sprite(spr_biglogo, 0, SCREEN_CENTER_X, SCREEN_CENTER_Y / 2);
        iui_label(SCREEN_CENTER_X - 257, SCREEN_CENTER_Y / 4 + 12, "Sincerely,", iuCream);
        
        iui_align_center();
        
        iui_label(SCREEN_CENTER_X, SCREEN_CENTER_Y / 1.4, "-=[Dear ImGui bootleg implementation in Gamemaker]=-", iuCream);
        
        iui_align_pop();
        
        // sprite
        var sinned = sine01_;
        var cosBoi = cos(iuiAnimTime * 0.1) * 12;
        var loopTime = 1320 - ((iuiAnimTime*2) % 1680);
        
        draw_sprite_ext(spr_chip64, 0, loopTime, (SCREEN_CENTER_Y * 2) - 70 - abs(cosBoi), 1, 1, sinned * 12, c_white, 1);
        iui_label_shadow(loopTime + 40, (SCREEN_CENTER_Y * 2) - 90 - abs(cosBoi), "&lt;- A random bloke,#   plz ignore.", iuPiss, 2, 2, iuHellaDark);
        
        draw_scroller("cracktro-scroller", SCREEN_CENTER_X - 300, SCREEN_CENTER_Y / 1.2, 600, 300, (staircase(iuiAnimTime, 30, 80) * 42) + 4, 42, iui_scroller_text, iui_scroller_colour);
        break;
        
    case 1:
        /// Elements
        var tabW = (1196 / 5);
        iui_rect(42, 85, 1196, 60, iuHellaDark);
        ui_tab_demo_idx = iui_tab(42, 90, tabW, 50, iui_pack("Button", "TextBox", "Slider", "Tab", "Misc."), ui_tab_demo_idx, 1);
        
        switch (ui_tab_demo_idx)
        {
            case 0:
                /// Button
                iui_align_center();
                
                // title
                draw_set_font(fnt_huge);
                
                iui_label_shadow(SCREEN_CENTER_X, 180, "=[ Button ]=", iuCream, 5, 5, iuHellaDark);
                
                draw_set_font(fnt_consolas);
                
                // codebox
                var strWid = string_width("is_clicked = iui_button(x, y, width, height, ID and label);") + 10;
                
                iui_rect(SCREEN_CENTER_X - (strWid / 2) - 2, 228, (strWid + 4), 54, iuMint);
                iui_rect(SCREEN_CENTER_X - (strWid / 2), 230, strWid, 50, iuHellaDark);
                iui_label(SCREEN_CENTER_X, 255, "is_clicked = iui_button(x, y, width, height, ID and label);", iuCream);
                
                iui_align_pop();
                
                // normal buttons
                iuiButtonShadow = true;
                
                iui_button(SCREEN_CENTER_X - 500, 300, 420, 84, "A Button.");
                iui_button(SCREEN_CENTER_X - 500, 400, 200, 84, "Yet#another button###ANALS");
                iui_button(SCREEN_CENTER_X - 280, 400, 200, 84, "And button#with same ID###ANALS");
                
                // checker
                iui_align_center();
                iui_label(SCREEN_CENTER_X - 400, 580, "I love dogs", iuCream);
                iui_label(SCREEN_CENTER_X - 180, 580, "I love cats", iuCream);
                iui_label(SCREEN_CENTER_X - 290, 620, "THANOS CAR", iuCream);
                ui_check_test = iui_checkbox(SCREEN_CENTER_X - 400, 600, 20, 20, ui_check_test, "check_test");
                ui_check_test2 = iui_checkbox(SCREEN_CENTER_X - 180, 600, 20, 20, ui_check_test2, "check_test_2");
                iui_checkbox(SCREEN_CENTER_X - 290, 640, 40, 40, true, "check_wew");
                iui_align_pop();
                
                // button with different ID than string
                iui_button(SCREEN_CENTER_X + 40, 300, 200, 84, "Button with#Different ID###SPECIAL_ID"); // ID Key = Hash of "SPECIAL_ID"
                
                // Draw white speech bubble
                var demoStr    = "string = Button with\#Different ID\#\#\#SPECIAL_ID";
                var demoStrWid = string_width(demoStr);
                var demoStrHei = string_height(demoStr);
                
                iui_rect_rot_center(SCREEN_CENTER_X + 60, 405, 20, 20, iuCream, 45);
                iui_rect(SCREEN_CENTER_X + 20, 405, demoStrWid + 20, demoStrHei + 20, iuCream);
                iui_rect(SCREEN_CENTER_X + 30 + (demoStrWid - string_width("\#\#\#SPECIAL_ID")), 415 + demoStrHei, string_width("\#\#\#SPECIAL_ID"), 4, iuRed); // underline
                iui_label(SCREEN_CENTER_X + 30, 415, demoStr, iuHellaDark);
                
                // button with hidden ID part
                iui_button(SCREEN_CENTER_X + 40, 470, 200, 84, "Button with#Hidden ID##SECRET_ID"); // ID Key = Hash of "Button with#Hidden ID##SECRET_ID"
                
                demoStr    = "string = Button with\#Hidden ID\#\#\#SECRET_ID";
                demoStrWid = string_width(demoStr);
                demoStrHei = string_height(demoStr);
                iui_rect_rot_center(SCREEN_CENTER_X + 60, 575, 20, 20, iuCream, 45);
                iui_rect(SCREEN_CENTER_X + 20, 575, string_width(demoStr) + 20, string_height(demoStr) + 20, iuCream); 
                iui_rect(SCREEN_CENTER_X + 30 + (demoStrWid - string_width("\#\#\#SECRET_ID")), 585 + demoStrHei, string_width("\#\#\#SECRET_ID"), 4, iuRed); // underline
                iui_label(SCREEN_CENTER_X + 30, 585, demoStr, iuHellaDark);
                
                
                iuiButtonShadow = false;
                break;
                
            case 1:
                /// Textbox
                iui_align_center();
                
                // title
                draw_set_font(fnt_huge);
                
                iui_label_shadow(SCREEN_CENTER_X, 180, "=[ TextBox ]=", iuCream, 5, 5, iuHellaDark);
                
                draw_set_font(fnt_consolas);
    
                // codebox
                var strWid = string_width("text_var = iui_textbox_numberonly(x, y, width, height, text_var, ID);") + 10;
                iui_rect(SCREEN_CENTER_X - (strWid / 2) - 2, 228, (strWid + 4), 104, iuMint);
                iui_rect(SCREEN_CENTER_X - (strWid / 2), 230, strWid, 100, iuHellaDark);
                iui_label(SCREEN_CENTER_X, 260, "text_var = iui_textbox(x, y, width, height, text_var, ID);", iuCream);
                iui_label(SCREEN_CENTER_X, 300, "text_var = iui_textbox_numberonly(x, y, width, height, text_var, ID);", iuCream);
                
                iui_align_pop();
                
                // textboxes
                var textboxY = 370;
                ui_textbox_testarea_str = iui_textbox(SCREEN_CENTER_X - 420, textboxY, 200, 50, ui_textbox_testarea_str, "7-grand-dad");
                ui_textbox_number_str   = iui_textbox_numberonly(SCREEN_CENTER_X - 420, textboxY + 160, 200, 50, ui_textbox_number_str, "number-plz");
                ui_textbox_thicc_str    = iui_textbox(SCREEN_CENTER_X + 20, textboxY, 400, 210, ui_textbox_thicc_str, "extra-thicc");
                iui_align_push(fa_right, fa_middle);
                
                iui_label(SCREEN_CENTER_X - 430, textboxY + 25, "STRING", iuCream);
                iui_label(SCREEN_CENTER_X - 430, textboxY + 185, "NUMBER ONLY", iuCream);
                
                iui_align_pop();
                
                // value
                var bubbleLabel = iui_strTrim(ui_textbox_testarea_str, 400);
                draw_textbubble_top(SCREEN_CENTER_X - 420, (textboxY + 70) + abs(sine01_ * 5), max(200, string_width(bubbleLabel) + 20), 50, bubbleLabel, iuCream, iuHellaDark, 32, 20);
                
                bubbleLabel = "Speed : " + string(ui_textbox_number_str);
                draw_textbubble_top(SCREEN_CENTER_X - 200, (textboxY + 230) + abs(sine01_ * 5), max(150, string_width(bubbleLabel) + 20), 50, bubbleLabel, iuCream, iuHellaDark, 32, 20);
                
                // value test
                var chipY = abs(sin(iuiAnimTime * 0.05 * real(ui_textbox_number_str))) * 21;
                draw_sprite_ext(spr_chip64, 0, SCREEN_CENTER_X - 136, (textboxY + 185) - chipY, 1, 1, real(ui_textbox_number_str) * iuiAnimTime, c_white, 1);
                break;
            
            case 2:
                /// Sliders
                iui_align_center();
                
                // title
                draw_set_font(fnt_huge);
                
                iui_label_shadow(SCREEN_CENTER_X, 180, "=[ Slider ]=", iuCream, 5, 5, iuHellaDark);
                
                draw_set_font(fnt_consolas);
    
                // codebox
                var strWid = string_width("value_var = iui_slider_v(x, y, value_var, height, minval, maxval, ID);") + 10;
                iui_rect(SCREEN_CENTER_X - (strWid / 2) - 2, 228, (strWid + 4), 104, iuMint);
                iui_rect(SCREEN_CENTER_X - (strWid / 2), 230, strWid, 100, iuHellaDark);
                iui_label(SCREEN_CENTER_X, 260, "value_var = iui_slider_h(x, y, value_var, width, minval, maxval, ID);", iuCream);
                iui_label(SCREEN_CENTER_X, 300, "value_var = iui_slider_v(x, y, value_var, height, minval, maxval, ID);", iuCream);
                
                iui_align_pop();
                
                // sliders
                ui_slider_test_h = iui_slider_h(SCREEN_CENTER_X - 110, 400, ui_slider_test_h, 420, 0, 100, "slider-test-h");
                ui_slider_test_v = iui_slider_v(SCREEN_CENTER_X - 200, 400 - (iuiSliderHHei / 2), ui_slider_test_v, 160 + iuiSliderHHei, 0, 100, "slider-test-v");
                ui_slider_test_minmax = iui_slider_h(SCREEN_CENTER_X - 110, 560, ui_slider_test_minmax, 420, 20, 42, "slider-test-minmax");
                
                draw_textbubble_right(SCREEN_CENTER_X - 460, 442, 200, 60, "Vertical#(iui_slider_v)", iuCream, iuHellaDark, 30, 20);
                draw_textbubble_topbottom(SCREEN_CENTER_X, 450, 200, 60, "Horizontal#(iui_slider_h)", iuCream, iuHellaDark, 100, 20 + (sine01_ * 4));
                break;
                
            case 3:
                /// Tabs
                iui_align_center();
                
                // title
                draw_set_font(fnt_huge);
                
                iui_label_shadow(SCREEN_CENTER_X, 180, "=[ Tabs ]=", iuCream, 5, 5, iuHellaDark);
                
                draw_set_font(fnt_consolas);
    
                // codebox
                var strWid = string_width("tab_index = iui_tab(x, y, width, height, strings, tab_index, trim mode);") + 10;
                iui_rect(SCREEN_CENTER_X - (strWid / 2) - 2, 228, (strWid + 4), 54, iuMint);
                iui_rect(SCREEN_CENTER_X - (strWid / 2), 230, strWid, 50, iuHellaDark);
                iui_label(SCREEN_CENTER_X, 255, "tab_index = iui_tab(x, y, width, height, strings, tab_index, trim mode);", iuCream);
                
                iui_align_pop();
                
                ui_tab_loss_idx = iui_tab(SCREEN_CENTER_X - (250 * 2), 350, 250, 64, iui_pack("ATATTTATATATATA", "OMAEWA MOU", "SHINDEIRU", "NANI"), ui_tab_loss_idx, 1);
        
                draw_sprite_ext(spr_loss, ui_tab_loss_idx, SCREEN_CENTER_X, 550, 0.5, 0.5, 0, c_white, 1);
                switch (ui_tab_loss_idx)
                {
                    case 0:
                        draw_set_font(fnt_huge)
                        iui_label(SCREEN_CENTER_X - 200, 510, "0]", iuDark2);
                        draw_set_font(fnt_consolas);
                        break;
                    case 1:
                        draw_set_font(fnt_huge)
                        iui_label(SCREEN_CENTER_X - 200, 510, "1]", iuDark2);
                        draw_set_font(fnt_consolas);
                        break;
                    case 2:
                        draw_set_font(fnt_huge)
                        iui_label(SCREEN_CENTER_X - 200, 510, "2]", iuDark2);
                        draw_set_font(fnt_consolas);
                        break;
                    case 3:
                        draw_set_font(fnt_huge)
                        iui_label(SCREEN_CENTER_X - 200, 510, "3]", iuDark2);
                        draw_set_font(fnt_consolas);
                        break;
                }
                break;
                
            case 4:
                /// Misc.
                iui_align_center();
                
                // title
                draw_set_font(fnt_huge);
                
                iui_label_shadow(SCREEN_CENTER_X, 180, "=[ Misc. ]=", iuCream, 5, 5, iuHellaDark);
                
                draw_set_font(fnt_consolas);
                
                iui_align_pop();
                
                // rect
                var iuRainbow = make_colour_hsv( (iuiAnimTime * 0.1) &amp; $FF, 242, 255 );
                iui_rect(SCREEN_CENTER_X - 560, 250, 200, 80, iuRainbow);
                draw_textbubble_top(SCREEN_CENTER_X - 560, 350, 480, 60, "iui_rect(x, y, width, height, colour)", iuCream, iuHellaDark, 42, 20 + (sine01_ * 4));
                
                iui_rect_rot(SCREEN_CENTER_X + 32, 290, 80, 80, iuRainbow, iuiAnimTime);
                draw_textbubble_top(SCREEN_CENTER_X - 10, 350, 600, 60, "iui_rect_rot(x, y, width, height, colour, angle)", iuCream, iuHellaDark, 42, 20 + (sine01_ * 4));
                
                iui_rect_rot_center(SCREEN_CENTER_X - 520, 500, 80, 80, iuRainbow, iuiAnimTime);
                draw_textbubble_top(SCREEN_CENTER_X - 560, 600, 520, 60, "iui_rect_rot_center([same as iui_rect_rot]", iuCream, iuHellaDark, 42, 20 + (sine01_ * 4));
                
                iui_line(SCREEN_CENTER_X + 80, 500, 120, iuiAnimTime, 8, iuRainbow);
                draw_textbubble_top(SCREEN_CENTER_X - 10, 600, 600, 60, "iui_line(x, y, length, angle, thickness, colour)", iuCream, iuHellaDark, 42, 20 + (sine01_ * 4)); 
                //iui_rect(SCREEN_CENTER_X - 420, 230, strWid, 100, iuRainbow);
                
                iui_align_center();
                iui_label(SCREEN_CENTER_X - 240, 500 + sine01_ * 10, "Oh, Also this text thing uses#iui_label(x, y, string, colour)...", iuPiss);
                iui_align_pop();
                break;
        }
        break;

    case 2:
        /// ID demo
        
        // text
        iui_align_center();
        
        draw_set_font(fnt_huge);
        
        iui_label_shadow(SCREEN_CENTER_X, SCREEN_CENTER_Y / 3, "=[ The ID and LABEL system ]=", iuCream, 0, 10, iuHellaDark);
        
        draw_set_font(fnt_vsauce);
        
        var AMERIKACOLOR = iuPiss;
        if ((iuiAnimTime &gt;&gt; 5) &amp; 1)
            AMERIKACOLOR = iuSky;
            
        iui_label_shadow(SCREEN_CENTER_X, (SCREEN_CENTER_Y / 3) + 50, "(LABEL : The one that's displayed)", AMERIKACOLOR, 0, 5, iuHellaDark);
        
        var labelSpacing = 390;
        var labelYMargin = 80;
        var infoWid = 320;
        var infoHei = 100;
        var infoX = SCREEN_CENTER_X - labelSpacing - (infoWid &gt;&gt; 1);
        var infoY = SCREEN_CENTER_Y - labelYMargin;
        
        // demo 1... Normal ID
        var idStr = "HAHA YES";
        
        iui_rect(infoX, infoY - (infoHei &gt;&gt; 1), infoWid, infoHei, iuHellaDark);
        iui_label(SCREEN_CENTER_X - labelSpacing, infoY, '" '+ fuckyoulinebreak(idStr) +' "', iuCream);
        
        iui_label(infoX + (infoWid &gt;&gt; 1), infoY + infoHei + infoHei, "LABEL : " + iui_trim_label(idStr), iuRed);
        draw_textbubble_top(infoX, infoY + (infoHei &gt;&gt; 1), infoWid, infoHei, "ID : " + iui_trim_id(idStr), iuCream, iuHellaDark, (infoWid &gt;&gt; 1), 30);
        iui_rect(infoX, infoY + infoHei + (infoHei &gt;&gt; 1), infoWid, infoHei, iuDark2);
        iui_label(infoX + (infoWid &gt;&gt; 1), infoY + infoHei + infoHei, "LABEL : " + iui_trim_label(idStr), iuCream);
        
        // demo 2... ###
        infoX = SCREEN_CENTER_X - (infoWid &gt;&gt; 1);
        idStr = "ASDF###SECRET";
        
        iui_rect(infoX, infoY - (infoHei &gt;&gt; 1), infoWid, infoHei, iuHellaDark);
        iui_label(SCREEN_CENTER_X, infoY, '" '+ fuckyoulinebreak(idStr) +' "', iuCream);
        
        draw_textbubble_top(infoX, infoY + (infoHei &gt;&gt; 1), infoWid, infoHei, "ID : " + iui_trim_id(idStr), iuCream, iuHellaDark, (infoWid &gt;&gt; 1), 30);
        iui_rect(infoX, infoY + infoHei + (infoHei &gt;&gt; 1), infoWid, infoHei, iuBrown);
        iui_label(infoX + (infoWid &gt;&gt; 1), infoY + infoHei + infoHei, "LABEL : " + iui_trim_label(idStr), iuCream);
        
        // demo 3... ##
        infoX = SCREEN_CENTER_X + labelSpacing - (infoWid &gt;&gt; 1);
        idStr = "NOTHING##HIDDEN";
        
        iui_rect(infoX, infoY - (infoHei &gt;&gt; 1), infoWid, infoHei, iuHellaDark);
        iui_label(SCREEN_CENTER_X + labelSpacing, infoY, '" '+ fuckyoulinebreak(idStr) +' "', iuCream);
        
        draw_textbubble_top(infoX, infoY + (infoHei &gt;&gt; 1), infoWid, infoHei, "ID : " + fuckyoulinebreak(iui_trim_id(idStr)), iuCream, iuHellaDark, (infoWid &gt;&gt; 1), 30);
        iui_rect(infoX, infoY + infoHei + (infoHei &gt;&gt; 1), infoWid, infoHei, iuNormal);
        iui_label(infoX + (infoWid &gt;&gt; 1), infoY + infoHei + infoHei, "LABEL : " + iui_trim_label(idStr), iuCream);
        
        draw_set_font(fnt_consolas);
        
        iui_align_pop();
        break;
        
    case 3:
        /// KAK????
        
        // How
        draw_set_font(fnt_huge);
        
        iui_label(120, (SCREEN_CENTER_Y / 3) + 10, "How?", iuHellaDark);
        iui_label(120, SCREEN_CENTER_Y / 3, "How?", iuCream);
        
        iui_label(120, (SCREEN_CENTER_Y + 10), "WHY NOT VERTEX BUFFER?", iuHellaDark);
        iui_label(120, SCREEN_CENTER_Y, "WHY NOT VERTEX BUFFER?", iuCream);
        
        draw_set_font(fnt_consolas);
        
        // list o' stuff
        var listX = 130;
        var listY = (SCREEN_CENTER_Y / 3) + 100;
        
        draw_set_font(fnt_bigge);
        
        iui_align_push(iui_halign, fa_middle);
        
        iui_sprite_shadow(spr_diamond, 0, listX, listY, iuMint, 1, 0, 5, iuHellaDark);
        iui_label_shadow(listX + 30, listY, "ABUSES GAMEMAKER'S SPRITE-BATCH SYSTEM", iuCream, 0, 5, iuHellaDark);
        
        listY += 35;
        iui_sprite_shadow(spr_diamond, 0, listX, listY, iuMint, 1, 0, 5, iuHellaDark);
        iui_label_shadow(listX + 30, listY, "...WHICH MAKES THE MOST OUT OF SINGLE DRAW CALL. (= REALLY  FAST!)", iuCream, 0, 5, iuHellaDark);
        
        listY += 35;
        iui_sprite_shadow(spr_diamond, 0, listX, listY, iuMint, 1, 0, 5, iuHellaDark);
        iui_label_shadow(listX + 30, listY, "HEAVILY INSPIRED FROM DEAR IMGUI'S VERTEX BUFFER SYSTEM", iuCream, 0, 5, iuHellaDark);
        
        listY = SCREEN_CENTER_Y + 110;
        iui_sprite_shadow(spr_diamond, 0, listX, listY, iuMint, 1, 0, 5, iuHellaDark);
        iui_label_shadow(listX + 30, listY, "VERTEX BUFFER IS NOT GOOD FOR MOVING THINGS LIKE GUI D: (NOT FUNNY)", iuCream, 0, 5, iuHellaDark);
        
        listY += 35;
        iui_sprite_shadow(spr_diamond, 0, listX, listY, iuMint, 1, 0, 5, iuHellaDark);
        iui_label_shadow(listX + 30, listY + 22, "SHOVING VERTICES INTO VERTEX BUFFER IS#REALLY EXPENSIVE FOR CPU (NOT FUNNY [2])", iuCream, 0, 5, iuHellaDark);
        
        iui_align_pop();
        
        draw_set_font(fnt_consolas);
        break;
        
    case 4:
        /// DEV INFO
        var pfpX = SCREEN_CENTER_X / 2.5;
        var pfpY = SCREEN_CENTER_Y / 1.5;
        var marginWid = (pfpX - 42) * 2;
        var marginX   = 42 + marginWid;
        
        // backdrop
        iui_rect(42, 85, marginWid, 595, iuHellaDark);
        iui_rect(42, 85, marginWid, 300, iuMint);
        iui_rect(marginX, 85, 10, 595, iuCream);
        
        // iui_rect(marginX + 10, 85, 1186 - marginWid, 595, iuDark2);
        
        // pfp
        draw_sprite(spr_pfp, 0, pfpX, pfpY);
        
        // namecard
        draw_set_font(fnt_huge);
        
        var nameWid = string_width("MILKFORDUNK") / 2;
        var nameHei = string_height("MILKFORDUNK") / 2;
        var nameX = pfpX;
        var nameY = pfpY + 110;
        
        iui_align_center();
        
        // Big name
        iui_rect(42, nameY - nameHei, marginWid, (nameHei * 2) + 4 + 20, iuDark);
        iui_rect(nameX - nameWid - 4, nameY - nameHei, (nameWid * 2) + 8, (nameHei * 2) + 4 + 20, iuBrown);
        iui_label_shadow(nameX, nameY, "MILKFORDUNK", iuCream, 0, 9, iuHellaDark);
        
        draw_set_font(fnt_consolas);
        
        // AKA
        iui_label(nameX, nameY + 42, "(AKA ZIKBAKGURI)", iuPiss);     
        
        draw_set_font(fnt_bigge);
        
        // Smol desc.
        nameY += 100;
        iui_label_shadow(nameX, nameY, "- IS 18 Y/O GAME DEV BOYO", iuCream, 0, 4, iuHellaDark);
        iui_label_shadow(nameX, nameY + 50, "- IS TOTAL DINK", iuCream, 0, 4, iuHellaDark);
        iui_label_shadow(nameX, nameY + 100, "(IS ALSO ARTIST)", iuCream, 0, 4, iuHellaDark);
        
        draw_set_font(fnt_consolas);
        
        iui_align_pop();
        
        // click-able smol link
        var linkX    = marginX + 60;
        var linkY    = pfpY - 79;
        var iconSize = 21; // half size of the icon
        var linkColour = iuSky;
        var linkStr    = "@ZIKBAKGURI";
        var linkOffX, linkW, linkH;

        iui_align_push(iui_halign, fa_middle);
        
        /// Twitter
        // we can't use shadow variant here; We want fully solid shadow, Not tinted shadow.
        // Thankfully the icon is rectangle... That means we can draw Rect for shadow!
        iui_rect(linkX - iconSize, linkY - iconSize + 10, 42, 42, iuHellaDark);
        iui_sprite(spr_icons42, 0, linkX, linkY, c_white, 1);
        iui_label(linkX + 31, linkY, "Twitter : ", iuCream);
        
        // clickable stuff
        linkW = string_width(linkStr) + 4;
        linkH = string_height(linkStr) + 4;
        linkOffX = (linkX + 31 + string_width("Twitter : "));
        
        // check click
        if (iui_button_nodraw(linkOffX - 2, linkY - 2, linkW, linkH, "btn-twitter"))
            url_open("https://twitter.com/ZIKBAKGURI");
            
        // check hover
        if (iui_hotItem == iui_get_id("btn-twitter"))
        {
            linkColour = iuRed;
            iui_rect(linkOffX - 2, linkY - 10, linkW, linkH, iuDark2);
        }
        
        iui_label_underline(linkOffX, linkY, linkStr, linkColour, 2, -16);
        
        // prepare for another line
        linkColour = iuSky;
        linkY += 62;
        
        
        /// Youtube
        iui_rect(linkX - iconSize, linkY - iconSize + 10, 42, 42, iuHellaDark);
        iui_sprite(spr_icons42, 1, linkX, linkY, c_white, 1);
        iui_label(linkX + 31, linkY, "YT : ", iuCream);
        
        linkStr = ":D MilkForDunk";
        linkW = string_width(linkStr) + 4;
        linkH = string_height(linkStr) + 4;
        linkOffX = (linkX + 31 + string_width("YT : "));

        if (iui_button_nodraw(linkOffX - 2, linkY - 2, linkW, linkH, "btn-yt"))
            url_open("https://www.youtube.com/user/XDJcreepXfail");
        if (iui_hotItem == iui_get_id("btn-yt"))
        {
            linkColour = iuRed;
            iui_rect(linkOffX - 2, linkY - 10, linkW, linkH, iuDark2);
        }
        
        iui_label_underline(linkOffX, linkY, linkStr, linkColour, 2, -16);
        
        linkColour = iuSky;
        linkY += 62;
        
        
        /// Naver
        iui_rect(linkX - iconSize, linkY - iconSize + 10, 42, 42, iuHellaDark);
        iui_sprite(spr_icons42, 2, linkX, linkY, c_white, 1);
        iui_label(linkX + 31, linkY, "NAVER blog : ", iuCream);
        
        linkStr = "rjansrhals";
        linkW = string_width(linkStr) + 4;
        linkH = string_height(linkStr) + 4;
        linkOffX = (linkX + 31 + string_width("NAVER blog : "));

        if (iui_button_nodraw(linkOffX - 2, linkY - 2, linkW, linkH, "btn-naver"))
            url_open("http://blog.naver.com/rjansrhals");
        if (iui_hotItem == iui_get_id("btn-naver"))
        {
            linkColour = iuRed;
            iui_rect(linkOffX - 2, linkY - 10, linkW, linkH, iuDark2);
        }
        
        iui_label_underline(linkOffX, linkY, linkStr, linkColour, 2, -16);
        
        linkColour = iuSky;
        linkY += 62;
        
        
        /// GitHub
        iui_rect(linkX - iconSize, linkY - iconSize + 10, 42, 42, iuHellaDark);
        iui_sprite(spr_icons42, 3, linkX, linkY, c_white, 1);
        iui_label(linkX + 31, linkY, "GitHub : ", iuCream);
        
        linkStr = "TandyRum1024";
        linkW = string_width(linkStr) + 4;
        linkH = string_height(linkStr) + 4;
        linkOffX = (linkX + 31 + string_width("GitHub : "));

        if (iui_button_nodraw(linkOffX - 2, linkY - 2, linkW, linkH, "btn-gh"))
            url_open("https://github.com/TandyRum1024");
        if (iui_hotItem == iui_get_id("btn-gh"))
        {
            linkColour = iuRed;
            iui_rect(linkOffX - 2, linkY - 10, linkW, linkH, iuDark2);
        }
        
        iui_label_underline(linkOffX, linkY, linkStr, linkColour, 2, -16);
        
        linkY += 62;
        
        iui_label(linkX - 21, linkY, "Contact me via e-mail @ yubin2892@gmail.com !", iuMint);
        
        iui_align_pop();
        break;    
    
    case 5:
        /// MISC
        // palette
        var paletteY = 200; 
        var paletteW = 180;
        var paletteH = 128;
        var paletteHalfW = paletteW / 2;
        var paletteOffX = 0;
        
        draw_colourblock(iuHellaDark, "Überdark", "\#191817",  SCREEN_CENTER_X - (paletteW * 2), paletteY, paletteW, paletteH);
        draw_colourblock(iuDark,      "Dark A", "\#313435",    SCREEN_CENTER_X - paletteW, paletteY, paletteW, paletteH);
        draw_colourblock(iuDark2,     "Dark B", "\#3F494F",    SCREEN_CENTER_X, paletteY, paletteW, paletteH);
        draw_colourblock(iuNormal,    "Neutral", "\#637674",   SCREEN_CENTER_X + paletteW, paletteY, paletteW, paletteH);
        
        paletteY   += paletteH;
        paletteW    =  (paletteW * 4) / 5;
        paletteOffX = -(paletteW * 5) / 2;
        
        draw_colourblock(iuMint,  "Mint", "\#25CDA3",        SCREEN_CENTER_X + paletteOffX, paletteY, paletteW, paletteH);
        paletteOffX += paletteW;
        draw_colourblock(iuSky,   "Bland blue", "\#68B9C8",  SCREEN_CENTER_X + paletteOffX, paletteY, paletteW, paletteH);
        paletteOffX += paletteW;
        draw_colourblock(iuRed,   "HyperRed", "\#ED3255",    SCREEN_CENTER_X + paletteOffX, paletteY, paletteW, paletteH);
        paletteOffX += paletteW;
        draw_colourblock(iuPiss,  "PISS", "\#EABF11",        SCREEN_CENTER_X + paletteOffX, paletteY, paletteW, paletteH);
        paletteOffX += paletteW;
        draw_colourblock(iuBrown, "THICC Brown", "\#5A4D48", SCREEN_CENTER_X + paletteOffX, paletteY, paletteW, paletteH);
        
        paletteY += paletteH;
        paletteW  = 360;
        paletteH  = 90;
        
        draw_colourblock(iuCream,     "Cream A", "\#EFE8C4", SCREEN_CENTER_X - paletteW, paletteY, paletteW, paletteH);
        draw_colourblock(iuCreamDark, "Cream B", "\#E0D3A7", SCREEN_CENTER_X, paletteY, paletteW, paletteH);
        
        // "Palette"
        draw_set_font(fnt_huge);
        
        iui_align_center();
        
        iui_label(SCREEN_CENTER_X, SCREEN_CENTER_Y / 2.5 + 10, "-= Palette =-", iuHellaDark);
        iui_label(SCREEN_CENTER_X, SCREEN_CENTER_Y / 2.5     , "-= Palette =-", iuCream);
        
        draw_set_font(fnt_consolas);
        
        iui_align_pop();
        break;
        
    case 6:
        /// test
        
        iui_align_center();
        
        iui_label(SCREEN_CENTER_X + 200, SCREEN_CENTER_Y - 200, "Normal", iuCream);
        
        iui_label_shadow(SCREEN_CENTER_X + 200, SCREEN_CENTER_Y - 180, "With Shadows", iuCream, 4, 4, iuHellaDark);
        
        iui_label_alpha(SCREEN_CENTER_X + 200 - 5, SCREEN_CENTER_Y - 155, "WOW! TRANSPARENCY!", iuMint, 0.5);
        
        iui_label_alpha(SCREEN_CENTER_X + 200, SCREEN_CENTER_Y - 150, "WOW! TRANSPARENCY!", iuRed, 0.5);
        
        iui_label_transform(SCREEN_CENTER_X + 200, SCREEN_CENTER_Y - 130, "Transformed one", 2, 2, 8, iuPiss, 1);
        
        iui_label_underline(SCREEN_CENTER_X + 200, SCREEN_CENTER_Y - 80, "VERY IMPORTANT", iuSky, 3, -6);
        
        iui_align_pop();
        
        iui_button(SCREEN_CENTER_X - 400, SCREEN_CENTER_Y - 200, 170, 70, "hello there :&gt;");
        
        iui_button(SCREEN_CENTER_X - 400, SCREEN_CENTER_Y - 90, 170, 70, "clicky boyo");
        
        iui_tab(SCREEN_CENTER_X - 500, SCREEN_CENTER_Y + 100, 100, 60, iui_pack("Tab 1", "Tab 2", "Tab whatever", "Tab bab", "KAK"), 3, 2);
        
        iui_slider_h(SCREEN_CENTER_X + 220, SCREEN_CENTER_Y + 50, (sine01_ * 50) + 50, 128, 0, 100, "sloshie");
        iui_slider_v(SCREEN_CENTER_X + 180, SCREEN_CENTER_Y + 50, (-sine01_ * 50) + 50, 128, 0, 100, "sloshie2");
        
        iui_textbox(SCREEN_CENTER_X + 220, SCREEN_CENTER_Y + 120, 200, 80, "Type something...", "konk");
        break;
}

// end UI
iui_end();


/// draw message
/*
draw_set_halign(1);
draw_set_valign(1);

var msgAlpha    = 1;
if (uiBigMsgCtr &gt; 0)
{
    uiBigMsgCtr--;
    msgAlpha = min(uiBigMsgCtr, 20)/20;
    
    draw_set_font(fnt_bigge);
    draw_text_colour(SCREEN_CENTER_X+10, SCREEN_CENTER_Y+210, uiBigMsg, iuHellaDark, iuHellaDark, iuHellaDark, iuHellaDark, msgAlpha/2);
    draw_text_colour(SCREEN_CENTER_X, SCREEN_CENTER_Y+200, uiBigMsg, iuPiss, iuPiss, iuPiss, iuPiss, msgAlpha);
    draw_set_font(fnt_consolas);
}
if (uiMsgCtr &gt; 0)
{
    uiMsgCtr--;
    msgAlpha = min(uiMsgCtr, 20)/20;
    
    draw_text_colour(SCREEN_CENTER_X+4, SCREEN_CENTER_Y+284, uiMsg, iuHellaDark, iuHellaDark, iuHellaDark, iuHellaDark, msgAlpha/2);
    draw_text_colour(SCREEN_CENTER_X, SCREEN_CENTER_Y+280, uiMsg, iuCream, iuCream, iuCream, iuCream, msgAlpha);
}

draw_set_halign(0);
draw_set_valign(0);
*/
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// KAWAII MOUSE
var mousex_ = window_mouse_get_x();
var mousey_ = window_mouse_get_y();
var mouseOffX = 12;
var mouseOffY = 37;


// outline
draw_sprite_ext(spr_uimouse, 0, mousex_, mousey_, 1, 1, 0, c_white, 1);

// mouse -&gt; first segment for hiding discontinous verlet stuff
var prevX = mousex_ + mouseOffX;
var prevY = mousey_ + mouseOffY;

var linkDist = uiMouseVerlet[ 0, 7];
var linkRot  = uiMouseVerlet[ 0, 6];
iui_rect_rot_origin(prevX, prevY, linkDist + 4, 12, iuHellaDark, linkRot, 4, 6);

for (var i=0; i&lt;uiMouseTailSegments; i++)
{
    prevX = uiMouseVerlet[ i, 0];
    prevY = uiMouseVerlet[ i, 1];
    linkDist = uiMouseVerlet[ i, 7];
    linkRot  = uiMouseVerlet[ i, 6];
    
    iui_rect_rot_origin(prevX, prevY, linkDist + 4, 12, iuHellaDark, linkRot, 4, 6);
}


// mouse
if (iui_inputDown)
    draw_sprite_ext(spr_uimouse, 2, mousex_, mousey_, 1, 1, 0, iuMouseColour, 1);
else
    draw_sprite_ext(spr_uimouse, 1, mousex_, mousey_, 1, 1, 0, iuMouseColour, 1);

// mouse-&gt;first segment for hiding discontinous verlet stuff
prevX = mousex_ + mouseOffX;
prevY = mousey_ + mouseOffY;

linkDist = point_distance(prevX, prevY, uiMouseVerlet[ 0, 0], uiMouseVerlet[ 0, 1]);
iui_rect_rot_origin(prevX, prevY, linkDist, 8, uiMouseTailColour[1], uiMouseVerlet[ 0, 6], 2, 4);

for (var i=0; i&lt;uiMouseTailSegments; i++)
{
    prevX = uiMouseVerlet[ i, 0];
    prevY = uiMouseVerlet[ i, 1];
    
    linkDist = uiMouseVerlet[ i, 7];
    iui_rect_rot_origin(prevX, prevY, linkDist, 8, uiMouseTailColour[i%uiMouseTailColourNum], uiMouseVerlet[ i, 6], 2, 4);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
